# .github/workflows/enrich_playlist.yml
name: Enriquecer Playlist desde TMDB (REST)

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  enrich:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --no-cache-dir requests

      - name: Enriquecer playlist.json con TMDB (REST API)
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          python <<EOF
          import os, json, requests

          api_key     = os.environ['TMDB_API_KEY']
          base_search = 'https://api.themoviedb.org/3/search/movie'
          base_movie  = 'https://api.themoviedb.org/3/movie'

          with open('playlist.json', encoding='utf-8') as f:
              data = json.load(f)

          enriched = []
          for item in data:
              sample = item['samples'][0]
              orig_title = sample['name']
              year = sample.get('anio','').strip()

              # 1) Buscar en inglés (en-US) para asegurar coincidencia exacta
              params = {
                  'api_key': api_key,
                  'language': 'en-US',
                  'query': orig_title
              }
              if year:
                  params['year'] = year
              results = requests.get(base_search, params=params).json().get('results',[])

              # 2) Si no hay resultados con año, reintentar sin año
              if year and not results:
                  params.pop('year')
                  results = requests.get(base_search, params=params).json().get('results',[])

              if not results:
                  # No se encontró, mantener original
                  enriched.append(item)
                  continue

              movie = results[0]
              movie_id = movie['id']

              # Obtener detalles **en español** para título y descripción localizados
              det = requests.get(f"{base_movie}/{movie_id}", params={
                  'api_key': api_key,
                  'language': 'es-MX'
              }).json()

              # Obtener imágenes y logos
              imgs = requests.get(f"{base_movie}/{movie_id}/images", params={
                  'api_key': api_key
              }).json()

              # Campos de TMDB
              title_es      = det.get('title') or orig_title
              genres        = [g['name'] for g in det.get('genres',[])]
              overview_es   = det.get('overview','').strip()
              release_date  = det.get('release_date','')
              release_year  = release_date[:4] if release_date else year
              runtime       = det.get('runtime',0)

              poster_path   = det.get('poster_path')
              backdrop_path = det.get('backdrop_path')
              poster_url    = f"https://image.tmdb.org/t/p/original{poster_path}"   if poster_path   else ""
              backdrop_url  = f"https://image.tmdb.org/t/p/original{backdrop_path}" if backdrop_path else ""

              logos = imgs.get('logos',[])
              logo_url = f"https://image.tmdb.org/t/p/original{logos[0]['file_path']}" if logos else ""

              # Reconstruir registro enriquecido
              enriched.append({
                  "name": genres[0] if genres else "",
                  "samples": [{
                      "name": title_es,
                      "url": sample['url'],
                      "icono": poster_url,
                      "iconoHorizontal": backdrop_url,
                      "iconpng": logo_url,
                      "type": "PELICULA",
                      "descripcion": overview_es,
                      "anio": release_year,
                      "genero": genres,
                      "duracion": f"{runtime} min"
                  }]
              })

          # Guardar JSON enriquecido
          with open('playlist.enriched.json','w',encoding='utf-8') as f:
              json.dump(enriched, f, indent=2, ensure_ascii=False)
          EOF

      - name: Commit and push enriched JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add playlist.enriched.json
          if ! git diff --cached --exit-code; then
            git commit -m "Agregar datos TMDB a playlist"
            git push
          else
            echo "No hay cambios en playlist.enriched.json"
          fi
