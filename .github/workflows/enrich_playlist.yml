# .github/workflows/enrich_playlist.yml
name: Enriquecer Playlist TMDB (ES y EN)

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # corre cada día a las 3AM

jobs:
  enrich:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --no-cache-dir requests

      - name: Enriquecer playlist.json en ES y EN
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          python <<EOF
          import os, json, requests

          api_key     = os.environ['TMDB_API_KEY']
          base_search = 'https://api.themoviedb.org/3/search/movie'
          base_movie  = 'https://api.themoviedb.org/3/movie'

          with open('playlist.json', encoding='utf-8') as f:
              original = json.load(f)

          def enrich(lang):
              """Devuelve lista enriquecida en idioma lang ('es-MX' o 'en-US')."""
              out = []
              for item in original:
                  sample = item['samples'][0]
                  title_orig = sample['name']
                  year = sample.get('anio','').strip()

                  # búsqueda en inglés (para coincidencias) si lang='es-MX', o en EN si lang='en-US'
                  search_lang = 'en-US' if lang == 'es-MX' else lang
                  params = {
                      'api_key': api_key,
                      'language': search_lang,
                      'query': title_orig
                  }
                  if year:
                      params['year'] = year
                  results = requests.get(base_search, params=params).json().get('results',[])

                  # reintentar sin año
                  if year and not results:
                      params.pop('year')
                      results = requests.get(base_search, params=params).json().get('results',[])

                  if not results:
                      # no encontró coincidencia, dejar item original
                      out.append(item)
                      continue

                  movie = results[0]
                  movie_id = movie['id']

                  # obtener detalles en target lang
                  det = requests.get(f"{base_movie}/{movie_id}", params={
                      'api_key': api_key,
                      'language': lang
                  }).json()
                  imgs = requests.get(f"{base_movie}/{movie_id}/images", params={
                      'api_key': api_key
                  }).json()

                  title_loc = det.get('title') or title_orig
                  genres    = [g['name'] for g in det.get('genres',[])]
                  overview  = det.get('overview','').strip()
                  release_date = det.get('release_date','')
                  release_year = release_date[:4] if release_date else year
                  runtime   = det.get('runtime',0)

                  poster_path   = det.get('poster_path')
                  backdrop_path = det.get('backdrop_path')
                  poster_url    = f"https://image.tmdb.org/t/p/original{poster_path}"   if poster_path   else ""
                  backdrop_url  = f"https://image.tmdb.org/t/p/original{backdrop_path}" if backdrop_path else ""

                  logos = imgs.get('logos',[])
                  logo_url = f"https://image.tmdb.org/t/p/original{logos[0]['file_path']}" if logos else ""

                  out.append({
                      "name": genres[0] if genres else "",
                      "samples": [{
                          "name": title_loc,
                          "url": sample['url'],
                          "icono": poster_url,
                          "iconoHorizontal": backdrop_url,
                          "iconpng": logo_url,
                          "type": "PELICULA",
                          "descripcion": overview,
                          "anio": release_year,
                          "genero": genres,
                          "duracion": f"{runtime} min"
                      }]
                  })
              return out

          # generar ambos
          es_data = enrich('es-MX')
          en_data = enrich('en-US')

          with open('playlist.enriched.es.json', 'w', encoding='utf-8') as f:
              json.dump(es_data, f, ensure_ascii=False, indent=2)
          with open('playlist.enriched.en.json', 'w', encoding='utf-8') as f:
              json.dump(en_data, f, ensure_ascii=False, indent=2)
          EOF

      - name: Commit and Push enriched JSONs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add playlist.enriched.es.json playlist.enriched.en.json
          if ! git diff --cached --exit-code; then
            git commit -m "Actualizar playlists enriquecidas ES y EN"
            git push
          else
            echo "No hay cambios en los JSON enriquecidos"
          fi
