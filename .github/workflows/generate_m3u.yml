name: Generar M3U desde VODS

Permitir escritura automática con GITHUB_TOKEN

defaults: run: shell: bash

permissions: contents: write

on:

Ejecución manual\ n  workflow_dispatch:

Ejecución programada cada hora

schedule: - cron: '0 * * * *'

jobs: build: runs-on: ubuntu-latest

steps:
- name: Checkout
  uses: actions/checkout@v3
  with:
    # Persistir credenciales para push
    persist-credentials: true

- name: Configurar Python
  uses: actions/setup-python@v4
  with:
    python-version: '3.x'

- name: Instalar dependencias
  run: |
    pip install --no-cache-dir requests beautifulsoup4

- name: Generar playlist y JSON
  run: |
    python << 'EOF'
    import requests
    from bs4 import BeautifulSoup
    from urllib.parse import unquote
    import json

    base_url = 'http://144.217.70.79/VODS-M/1080P/'
    resp = requests.get(base_url)
    resp.raise_for_status()

    soup = BeautifulSoup(resp.text, 'html.parser')
    m3u_lines = ['#EXTM3U']
    json_list = []

    for link in soup.find_all('a', href=True):
        href = link['href']
        if href.lower().endswith('.mkv'):
            # Construir URL completa
            video_url = base_url + href
            # Extraer nombre sin extensión y decodificar espacios
            raw = href.rsplit('/', 1)[-1].rsplit('.', 1)[0]
            title = unquote(raw)

            # Añadir entrada al M3U
            m3u_lines.append(f'#EXTINF:-1 tvg-name="" tvg-id="" tvg-logo="" group-title="",{title}')
            m3u_lines.append(video_url)

            # Construir objeto JSON
            item = {
                "name": title,
                "samples": [
                    {
                        "name": title,
                        "url": video_url,
                        "icono": "",
                        "iconoHorizontal": "",
                        "iconpng": "",
                        "type": "PELICULA",
                        "descripcion": "",
                        "anio": "",
                        "genero": "",
                        "duracion": ""
                    }
                ]
            }
            json_list.append(item)

    # Escribir playlist.m3u
    with open('playlist.m3u', 'w') as f:
        f.write('\n'.join(m3u_lines))
    # Escribir playlist.json
    with open('playlist.json', 'w') as f:
        json.dump(json_list, f, ensure_ascii=False, indent=2)
    EOF

- name: Commit y push de archivos
  run: |
    git config user.name "github-actions[bot]"
    git config user.email "github-actions[bot]@users.noreply.github.com"
    git add playlist.m3u playlist.json
    if ! git diff --cached --exit-code; then
      git commit -m "Actualizar playlist.m3u y playlist.json"
      git push
    else
      echo "No hay cambios en playlist ni JSON"
    fi
