# .github/workflows/enrich_playlist.yml
name: Enriquecer Playlist TMDB con lógica ajustada

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  enrich:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --no-cache-dir requests

      - name: Enriquecer playlist.json con TMDB (REST API)
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          python <<EOF
          import os, json, requests

          api_key     = os.environ['TMDB_API_KEY']
          base_search = 'https://api.themoviedb.org/3/search/movie'
          base_movie  = 'https://api.themoviedb.org/3/movie'

          def fetch_details(movie_id, lang='es-MX'):
              det = requests.get(f"{base_movie}/{movie_id}", params={
                  'api_key': api_key,
                  'language': lang
              }).json()
              imgs = requests.get(f"{base_movie}/{movie_id}/images", params={
                  'api_key': api_key
              }).json()
              return det, imgs

          with open('playlist.json', encoding='utf-8') as f:
              data = json.load(f)

          enriched = []
          for item in data:
              sample = item['samples'][0]
              orig_title = sample['name']
              orig_year  = sample.get('anio','').strip()

              # 1) buscar en inglés con año
              params = {
                  'api_key': api_key,
                  'language': 'en-US',
                  'query': orig_title
              }
              if orig_year:
                  params['year'] = orig_year
              results = requests.get(base_search, params=params).json().get('results',[])

              # 2) si no hay resultados, buscar en inglés sin año
              if not results:
                  params.pop('year', None)
                  results = requests.get(base_search, params=params).json().get('results',[])

              # top result?
              if results:
                  movie = results[0]
                  # comprobar discrepancia de año ±1
                  tmdb_year = movie.get('release_date','')[:4]
                  if tmdb_year and orig_year and abs(int(tmdb_year) - int(orig_year)) == 1:
                      corrected_year = tmdb_year
                  else:
                      corrected_year = orig_year or tmdb_year

                  # obtener datos en español
                  det, imgs = fetch_details(movie['id'], lang='es-MX')
                  title_es    = det.get('title') or orig_title
                  genres      = [g['name'] for g in det.get('genres',[])]
                  overview    = det.get('overview','').strip()
                  release_date= det.get('release_date','')
                  final_year  = release_date[:4] if release_date else corrected_year
                  runtime     = det.get('runtime',0)
                  poster      = f"https://image.tmdb.org/t/p/original{det.get('poster_path','')}"   if det.get('poster_path')   else ""
                  backdrop    = f"https://image.tmdb.org/t/p/original{det.get('backdrop_path','')}" if det.get('backdrop_path') else ""
                  logos       = imgs.get('logos',[])
                  logo_url    = f"https://image.tmdb.org/t/p/original{logos[0]['file_path']}" if logos else ""

                  top_name = genres[0] if genres else ""
                  sample_name = title_es
                  sample_year = final_year
                  description = overview
                  duration    = f"{runtime} min"
                  all_genres  = genres

              else:
                  # no encontrado: rellenar name=Variado y conservar sample original
                  top_name      = "Variado"
                  sample_name   = orig_title
                  sample_year   = orig_year
                  description   = ""
                  poster        = ""
                  backdrop      = ""
                  logo_url      = ""
                  duration      = ""
                  all_genres    = []

              enriched.append({
                  "name": top_name,
                  "samples": [{
                      "name": sample_name,
                      "url": sample['url'],
                      "icono": poster,
                      "iconoHorizontal": backdrop,
                      "iconpng": logo_url,
                      "type": "PELICULA",
                      "descripcion": description,
                      "anio": sample_year,
                      "genero": all_genres,
                      "duracion": duration
                  }]
              })

          with open('playlist.enriched.json','w',encoding='utf-8') as f:
              json.dump(enriched, f, indent=2, ensure_ascii=False)
          EOF

      - name: Commit and push enriched JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add playlist.enriched.json
          if ! git diff --cached --exit-code; then
            git commit -m "Actualizar playlist.enriched.json"
            git push
          else
            echo "No hay cambios en playlist.enriched.json"
          fi
